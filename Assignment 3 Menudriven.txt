%macro WRITE 02
	mov rax,1
	mov rdi,1
	mov rsi,%1
	mov rdx,%2
	syscall
%endmacro
%macro READ 02
	mov rax,0
	mov rdi,0
	mov rsi,%1
	mov rdx,%2
	syscall
%endmacro
section .data
	menu db " ",10
	db " 1.Succesive Addition Method ",10
	db " 2.Add and shift Method ",10
	db " 3.Exit ",10
	menu_len equ $-menu
	msg db " Enter 2 numbers ",10
	len equ $-msg
	msg1 db " Answer ",10
	len1 equ $-msg1
	msg2 db " Invalid Choice! ",10
	len2 equ $-msg2
section .bss
	char_buff resb 17
	a resq 1
	b resq 1
	c resq 1
	A resq 1
	Q resq 1
	B resq 1
	choice resb 02
section .text
global _start
_start:
	print_menu: 
		WRITE menu,menu_len
		READ choice,02
		cmp byte[choice],31H
		je succ_add
		cmp byte[choice],32H
		je add_shift
		cmp byte[choice],33H
		je exit
		WRITE msg2,len2
	exit: 
		mov rax,60
		mov rdi,0
		syscall
	succ_add:
		WRITE msg,len
		READ char_buff,17
		call accept
		mov [B],rbx
		READ char_buff,17
		call accept
		mov [Q],rbx
		mov qword[A],00H
		mov rcx,64
	up: 
		mov rbx,[Q]
		and rbx,01H
		jz shiftAQ
		mov rbx,[B]
		add [A],rbx
	shiftAQ: 
		shr qword[Q],01H
		mov rbx,[Q]
		mov rdx,[A]
		and rdx,01H
		jz shiftA
		mov rdx,01H
		ror rdx,01H
		or [Q],rdx
	shiftA: 
		shr qword[A],01H
		dec rcx
		jnz up
		WRITE msg1,len1
		mov rbx,[A]
		call display
		mov rbx,[Q]
		call display
		jmp print_menu
	add_shift: 
		WRITE msg,len
		READ char_buff,17
		call accept
		mov qword[a],rbx
		READ char_buff,17
		call accept
		mov qword[b],rbx
		mov rcx,qword[b]
		mov rbx,00H
	up1: 
		add rbx,qword[a]
		dec rcx
		jnz up1
		mov [c],rbx
		WRITE msg1,len1
		mov rbx,[c]
		call display
		jmp print_menu
	accept: 
		dec rax
		mov rcx,rax
		mov rsi,char_buff
		mov rbx,00
		up2: shl rbx,04
		mov rdx,00
		mov dl,byte[rsi]
		cmp dl,39H
		jbe sub30
		sub dl,07H
		sub30: sub dl,30H
		add rbx,rdx
		inc rsi
		dec rcx
		jnz up2
		ret
	display:
		mov rsi, char_buff
		mov rcx, 16
		up3: rol rbx, 04H
		mov dl, bl
		and dl, 0FH
		cmp dl, 09H
		jbe add30
		add dl,07H
		add30: add dl,30H
		mov byte[rsi], dl
		inc rsi
		dec rcx
		jnz up3
		WRITE char_buff, 16
		ret
